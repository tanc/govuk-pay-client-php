<?php
/**
 * PaymentLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GOV.UK Pay API
 *
 * The GOV.UK Pay REST API. Read [our documentation](https://docs.payments.service.gov.uk/) for more details.
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentLinks Class Doc Comment
 *
 * @category Class
 * @description links for payment
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth_url_post' => '\Swagger\Client\Model\PostLink',
        'cancel' => '\Swagger\Client\Model\PostLink',
        'capture' => '\Swagger\Client\Model\PostLink',
        'events' => '\Swagger\Client\Model\Link',
        'next_url' => '\Swagger\Client\Model\Link',
        'next_url_post' => '\Swagger\Client\Model\PostLink',
        'refunds' => '\Swagger\Client\Model\Link',
        'self' => '\Swagger\Client\Model\Link'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth_url_post' => null,
        'cancel' => null,
        'capture' => null,
        'events' => null,
        'next_url' => null,
        'next_url_post' => null,
        'refunds' => null,
        'self' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_url_post' => 'auth_url_post',
        'cancel' => 'cancel',
        'capture' => 'capture',
        'events' => 'events',
        'next_url' => 'next_url',
        'next_url_post' => 'next_url_post',
        'refunds' => 'refunds',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_url_post' => 'setAuthUrlPost',
        'cancel' => 'setCancel',
        'capture' => 'setCapture',
        'events' => 'setEvents',
        'next_url' => 'setNextUrl',
        'next_url_post' => 'setNextUrlPost',
        'refunds' => 'setRefunds',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_url_post' => 'getAuthUrlPost',
        'cancel' => 'getCancel',
        'capture' => 'getCapture',
        'events' => 'getEvents',
        'next_url' => 'getNextUrl',
        'next_url_post' => 'getNextUrlPost',
        'refunds' => 'getRefunds',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_url_post'] = isset($data['auth_url_post']) ? $data['auth_url_post'] : null;
        $this->container['cancel'] = isset($data['cancel']) ? $data['cancel'] : null;
        $this->container['capture'] = isset($data['capture']) ? $data['capture'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['next_url'] = isset($data['next_url']) ? $data['next_url'] : null;
        $this->container['next_url_post'] = isset($data['next_url_post']) ? $data['next_url_post'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_url_post
     *
     * @return \Swagger\Client\Model\PostLink
     */
    public function getAuthUrlPost()
    {
        return $this->container['auth_url_post'];
    }

    /**
     * Sets auth_url_post
     *
     * @param \Swagger\Client\Model\PostLink $auth_url_post auth_url_post
     *
     * @return $this
     */
    public function setAuthUrlPost($auth_url_post)
    {
        $this->container['auth_url_post'] = $auth_url_post;

        return $this;
    }

    /**
     * Gets cancel
     *
     * @return \Swagger\Client\Model\PostLink
     */
    public function getCancel()
    {
        return $this->container['cancel'];
    }

    /**
     * Sets cancel
     *
     * @param \Swagger\Client\Model\PostLink $cancel cancel
     *
     * @return $this
     */
    public function setCancel($cancel)
    {
        $this->container['cancel'] = $cancel;

        return $this;
    }

    /**
     * Gets capture
     *
     * @return \Swagger\Client\Model\PostLink
     */
    public function getCapture()
    {
        return $this->container['capture'];
    }

    /**
     * Sets capture
     *
     * @param \Swagger\Client\Model\PostLink $capture capture
     *
     * @return $this
     */
    public function setCapture($capture)
    {
        $this->container['capture'] = $capture;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Swagger\Client\Model\Link
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Swagger\Client\Model\Link $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets next_url
     *
     * @return \Swagger\Client\Model\Link
     */
    public function getNextUrl()
    {
        return $this->container['next_url'];
    }

    /**
     * Sets next_url
     *
     * @param \Swagger\Client\Model\Link $next_url next_url
     *
     * @return $this
     */
    public function setNextUrl($next_url)
    {
        $this->container['next_url'] = $next_url;

        return $this;
    }

    /**
     * Gets next_url_post
     *
     * @return \Swagger\Client\Model\PostLink
     */
    public function getNextUrlPost()
    {
        return $this->container['next_url_post'];
    }

    /**
     * Sets next_url_post
     *
     * @param \Swagger\Client\Model\PostLink $next_url_post next_url_post
     *
     * @return $this
     */
    public function setNextUrlPost($next_url_post)
    {
        $this->container['next_url_post'] = $next_url_post;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Swagger\Client\Model\Link
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Swagger\Client\Model\Link $refunds refunds
     *
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets self
     *
     * @return \Swagger\Client\Model\Link
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param \Swagger\Client\Model\Link $self self
     *
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
