<?php
/**
 * PaymentDetailForSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GOV.UK Pay API
 *
 * The GOV.UK Pay REST API. Read [our documentation](https://docs.payments.service.gov.uk/) for more details.
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentDetailForSearch Class Doc Comment
 *
 * @category Class
 * @description Contains payments matching your search criteria.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentDetailForSearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentDetailForSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_links' => '\Swagger\Client\Model\PaymentLinksForSearch',
        'amount' => 'int',
        'authorisation_mode' => 'string',
        'authorisation_summary' => '\Swagger\Client\Model\AuthorisationSummary',
        'card_brand' => 'string',
        'card_details' => '\Swagger\Client\Model\CardDetails',
        'corporate_card_surcharge' => 'int',
        'created_date' => 'string',
        'delayed_capture' => 'bool',
        'description' => 'string',
        'email' => 'string',
        'exemption' => '\Swagger\Client\Model\Exemption',
        'fee' => 'int',
        'language' => 'string',
        'metadata' => '\Swagger\Client\Model\ExternalMetadata',
        'moto' => 'bool',
        'net_amount' => 'int',
        'payment_id' => 'string',
        'payment_provider' => 'string',
        'provider_id' => 'string',
        'reference' => 'string',
        'refund_summary' => '\Swagger\Client\Model\RefundSummary',
        'return_url' => 'string',
        'settlement_summary' => '\Swagger\Client\Model\PaymentSettlementSummary',
        'state' => '\Swagger\Client\Model\PaymentState',
        'total_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_links' => null,
        'amount' => 'int64',
        'authorisation_mode' => null,
        'authorisation_summary' => null,
        'card_brand' => null,
        'card_details' => null,
        'corporate_card_surcharge' => 'int64',
        'created_date' => null,
        'delayed_capture' => null,
        'description' => null,
        'email' => null,
        'exemption' => null,
        'fee' => 'int64',
        'language' => null,
        'metadata' => null,
        'moto' => null,
        'net_amount' => 'int64',
        'payment_id' => null,
        'payment_provider' => null,
        'provider_id' => null,
        'reference' => null,
        'refund_summary' => null,
        'return_url' => null,
        'settlement_summary' => null,
        'state' => null,
        'total_amount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_links' => '_links',
        'amount' => 'amount',
        'authorisation_mode' => 'authorisation_mode',
        'authorisation_summary' => 'authorisation_summary',
        'card_brand' => 'card_brand',
        'card_details' => 'card_details',
        'corporate_card_surcharge' => 'corporate_card_surcharge',
        'created_date' => 'created_date',
        'delayed_capture' => 'delayed_capture',
        'description' => 'description',
        'email' => 'email',
        'exemption' => 'exemption',
        'fee' => 'fee',
        'language' => 'language',
        'metadata' => 'metadata',
        'moto' => 'moto',
        'net_amount' => 'net_amount',
        'payment_id' => 'payment_id',
        'payment_provider' => 'payment_provider',
        'provider_id' => 'provider_id',
        'reference' => 'reference',
        'refund_summary' => 'refund_summary',
        'return_url' => 'return_url',
        'settlement_summary' => 'settlement_summary',
        'state' => 'state',
        'total_amount' => 'total_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_links' => 'setLinks',
        'amount' => 'setAmount',
        'authorisation_mode' => 'setAuthorisationMode',
        'authorisation_summary' => 'setAuthorisationSummary',
        'card_brand' => 'setCardBrand',
        'card_details' => 'setCardDetails',
        'corporate_card_surcharge' => 'setCorporateCardSurcharge',
        'created_date' => 'setCreatedDate',
        'delayed_capture' => 'setDelayedCapture',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'exemption' => 'setExemption',
        'fee' => 'setFee',
        'language' => 'setLanguage',
        'metadata' => 'setMetadata',
        'moto' => 'setMoto',
        'net_amount' => 'setNetAmount',
        'payment_id' => 'setPaymentId',
        'payment_provider' => 'setPaymentProvider',
        'provider_id' => 'setProviderId',
        'reference' => 'setReference',
        'refund_summary' => 'setRefundSummary',
        'return_url' => 'setReturnUrl',
        'settlement_summary' => 'setSettlementSummary',
        'state' => 'setState',
        'total_amount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_links' => 'getLinks',
        'amount' => 'getAmount',
        'authorisation_mode' => 'getAuthorisationMode',
        'authorisation_summary' => 'getAuthorisationSummary',
        'card_brand' => 'getCardBrand',
        'card_details' => 'getCardDetails',
        'corporate_card_surcharge' => 'getCorporateCardSurcharge',
        'created_date' => 'getCreatedDate',
        'delayed_capture' => 'getDelayedCapture',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'exemption' => 'getExemption',
        'fee' => 'getFee',
        'language' => 'getLanguage',
        'metadata' => 'getMetadata',
        'moto' => 'getMoto',
        'net_amount' => 'getNetAmount',
        'payment_id' => 'getPaymentId',
        'payment_provider' => 'getPaymentProvider',
        'provider_id' => 'getProviderId',
        'reference' => 'getReference',
        'refund_summary' => 'getRefundSummary',
        'return_url' => 'getReturnUrl',
        'settlement_summary' => 'getSettlementSummary',
        'state' => 'getState',
        'total_amount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHORISATION_MODE_WEB = 'web';
    const AUTHORISATION_MODE_MOTO_API = 'moto_api';
    const AUTHORISATION_MODE_EXTERNAL = 'external';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_CY = 'cy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorisationModeAllowableValues()
    {
        return [
            self::AUTHORISATION_MODE_WEB,
            self::AUTHORISATION_MODE_MOTO_API,
            self::AUTHORISATION_MODE_EXTERNAL,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN,
            self::LANGUAGE_CY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['authorisation_mode'] = isset($data['authorisation_mode']) ? $data['authorisation_mode'] : null;
        $this->container['authorisation_summary'] = isset($data['authorisation_summary']) ? $data['authorisation_summary'] : null;
        $this->container['card_brand'] = isset($data['card_brand']) ? $data['card_brand'] : null;
        $this->container['card_details'] = isset($data['card_details']) ? $data['card_details'] : null;
        $this->container['corporate_card_surcharge'] = isset($data['corporate_card_surcharge']) ? $data['corporate_card_surcharge'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['delayed_capture'] = isset($data['delayed_capture']) ? $data['delayed_capture'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['exemption'] = isset($data['exemption']) ? $data['exemption'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['moto'] = isset($data['moto']) ? $data['moto'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['payment_provider'] = isset($data['payment_provider']) ? $data['payment_provider'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['refund_summary'] = isset($data['refund_summary']) ? $data['refund_summary'] : null;
        $this->container['return_url'] = isset($data['return_url']) ? $data['return_url'] : null;
        $this->container['settlement_summary'] = isset($data['settlement_summary']) ? $data['settlement_summary'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthorisationModeAllowableValues();
        if (!is_null($this->container['authorisation_mode']) && !in_array($this->container['authorisation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authorisation_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _links
     *
     * @return \Swagger\Client\Model\PaymentLinksForSearch
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \Swagger\Client\Model\PaymentLinksForSearch $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The description assigned to the payment when it was created.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets authorisation_mode
     *
     * @return string
     */
    public function getAuthorisationMode()
    {
        return $this->container['authorisation_mode'];
    }

    /**
     * Sets authorisation_mode
     *
     * @param string $authorisation_mode How the payment will be authorised. Payments created in `web` mode require the paying user to visit the `next_url` to complete the payment.
     *
     * @return $this
     */
    public function setAuthorisationMode($authorisation_mode)
    {
        $allowedValues = $this->getAuthorisationModeAllowableValues();
        if (!is_null($authorisation_mode) && !in_array($authorisation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authorisation_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorisation_mode'] = $authorisation_mode;

        return $this;
    }

    /**
     * Gets authorisation_summary
     *
     * @return \Swagger\Client\Model\AuthorisationSummary
     */
    public function getAuthorisationSummary()
    {
        return $this->container['authorisation_summary'];
    }

    /**
     * Sets authorisation_summary
     *
     * @param \Swagger\Client\Model\AuthorisationSummary $authorisation_summary authorisation_summary
     *
     * @return $this
     */
    public function setAuthorisationSummary($authorisation_summary)
    {
        $this->container['authorisation_summary'] = $authorisation_summary;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return string
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param string $card_brand This attribute is deprecated. Please use `card_details.card_brand` instead.
     *
     * @return $this
     */
    public function setCardBrand($card_brand)
    {
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets card_details
     *
     * @return \Swagger\Client\Model\CardDetails
     */
    public function getCardDetails()
    {
        return $this->container['card_details'];
    }

    /**
     * Sets card_details
     *
     * @param \Swagger\Client\Model\CardDetails $card_details card_details
     *
     * @return $this
     */
    public function setCardDetails($card_details)
    {
        $this->container['card_details'] = $card_details;

        return $this;
    }

    /**
     * Gets corporate_card_surcharge
     *
     * @return int
     */
    public function getCorporateCardSurcharge()
    {
        return $this->container['corporate_card_surcharge'];
    }

    /**
     * Sets corporate_card_surcharge
     *
     * @param int $corporate_card_surcharge The [corporate card surcharge](https://docs.payments.service.gov.uk/corporate_card_surcharges/#add-corporate-card-fees) amount in pence.
     *
     * @return $this
     */
    public function setCorporateCardSurcharge($corporate_card_surcharge)
    {
        $this->container['corporate_card_surcharge'] = $corporate_card_surcharge;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets delayed_capture
     *
     * @return bool
     */
    public function getDelayedCapture()
    {
        return $this->container['delayed_capture'];
    }

    /**
     * Sets delayed_capture
     *
     * @param bool $delayed_capture `delayed_capture` is `true` if you’re [controlling how long it takes GOV.UK Pay to take (‘capture’) a payment](https://docs.payments.service.gov.uk/delayed_capture).
     *
     * @return $this
     */
    public function setDelayedCapture($delayed_capture)
    {
        $this->container['delayed_capture'] = $delayed_capture;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description assigned to the payment when it was created.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets exemption
     *
     * @return \Swagger\Client\Model\Exemption
     */
    public function getExemption()
    {
        return $this->container['exemption'];
    }

    /**
     * Sets exemption
     *
     * @param \Swagger\Client\Model\Exemption $exemption exemption
     *
     * @return $this
     */
    public function setExemption($exemption)
    {
        $this->container['exemption'] = $exemption;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return int
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param int $fee The [payment service provider’s (PSP) transaction fee](https://docs.payments.service.gov.uk/reporting/#psp-fees), in pence. `fee` only appears when we have taken (‘captured’) the payment from the user or if their payment fails after they submitted their card details. `fee` will not appear if your PSP is Worldpay or you are using an API key from a test service.
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The ISO-6391 Alpha-2 code of the [language of the user's payment page](https://docs.payments.service.gov.uk/optional_features/welsh_language).
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Swagger\Client\Model\ExternalMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Swagger\Client\Model\ExternalMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets moto
     *
     * @return bool
     */
    public function getMoto()
    {
        return $this->container['moto'];
    }

    /**
     * Sets moto
     *
     * @param bool $moto Indicates if this payment is a [Mail Order / Telephone Order (MOTO) payment](https://docs.payments.service.gov.uk/moto_payments).
     *
     * @return $this
     */
    public function setMoto($moto)
    {
        $this->container['moto'] = $moto;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return int
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param int $net_amount The amount, in pence, that will be paid into your bank account after your payment service provider takes the `fee`.
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id The unique ID GOV.UK Pay automatically associated with this payment when you created it.
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment_provider
     *
     * @return string
     */
    public function getPaymentProvider()
    {
        return $this->container['payment_provider'];
    }

    /**
     * Sets payment_provider
     *
     * @param string $payment_provider The payment service provider that processed this payment.
     *
     * @return $this
     */
    public function setPaymentProvider($payment_provider)
    {
        $this->container['payment_provider'] = $payment_provider;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id The unique ID your payment service provider generated for this payment. This is not the same as the `payment_id`.
     *
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference associated with the payment when it was created. `reference` is not unique - multiple payments can have the same `reference` value.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets refund_summary
     *
     * @return \Swagger\Client\Model\RefundSummary
     */
    public function getRefundSummary()
    {
        return $this->container['refund_summary'];
    }

    /**
     * Sets refund_summary
     *
     * @param \Swagger\Client\Model\RefundSummary $refund_summary refund_summary
     *
     * @return $this
     */
    public function setRefundSummary($refund_summary)
    {
        $this->container['refund_summary'] = $refund_summary;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url The URL you direct the paying user to after their payment journey on GOV.UK Pay ends.
     *
     * @return $this
     */
    public function setReturnUrl($return_url)
    {
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets settlement_summary
     *
     * @return \Swagger\Client\Model\PaymentSettlementSummary
     */
    public function getSettlementSummary()
    {
        return $this->container['settlement_summary'];
    }

    /**
     * Sets settlement_summary
     *
     * @param \Swagger\Client\Model\PaymentSettlementSummary $settlement_summary settlement_summary
     *
     * @return $this
     */
    public function setSettlementSummary($settlement_summary)
    {
        $this->container['settlement_summary'] = $settlement_summary;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Swagger\Client\Model\PaymentState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Swagger\Client\Model\PaymentState $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int $total_amount Amount your user paid in pence, including corporate card fees. `total_amount` only appears if you [added a corporate card surcharge to the payment](https://docs.payments.service.gov.uk/corporate_card_surcharges/#add-corporate-card-fees).
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
