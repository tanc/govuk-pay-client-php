<?php
/**
 * CardPaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GOV.UK Pay API
 *
 * The GOV.UK Pay REST API. Read [our documentation](https://docs.payments.service.gov.uk/) for more details.
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CardPaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardPaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelAPayment
     *
     * Cancel payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re cancelling. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelAPayment($payment_id)
    {
        $this->cancelAPaymentWithHttpInfo($payment_id);
    }

    /**
     * Operation cancelAPaymentWithHttpInfo
     *
     * Cancel payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re cancelling. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelAPaymentWithHttpInfo($payment_id)
    {
        $returnType = '';
        $request = $this->cancelAPaymentRequest($payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelAPaymentAsync
     *
     * Cancel payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re cancelling. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAPaymentAsync($payment_id)
    {
        return $this->cancelAPaymentAsyncWithHttpInfo($payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAPaymentAsyncWithHttpInfo
     *
     * Cancel payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re cancelling. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAPaymentAsyncWithHttpInfo($payment_id)
    {
        $returnType = '';
        $request = $this->cancelAPaymentRequest($payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelAPayment'
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re cancelling. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelAPaymentRequest($payment_id)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling cancelAPayment'
            );
        }

        $resourcePath = '/v1/payments/{paymentId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureAPayment
     *
     * Take a delayed payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re capturing. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function captureAPayment($payment_id)
    {
        $this->captureAPaymentWithHttpInfo($payment_id);
    }

    /**
     * Operation captureAPaymentWithHttpInfo
     *
     * Take a delayed payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re capturing. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureAPaymentWithHttpInfo($payment_id)
    {
        $returnType = '';
        $request = $this->captureAPaymentRequest($payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureAPaymentAsync
     *
     * Take a delayed payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re capturing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAPaymentAsync($payment_id)
    {
        return $this->captureAPaymentAsyncWithHttpInfo($payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureAPaymentAsyncWithHttpInfo
     *
     * Take a delayed payment
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re capturing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAPaymentAsyncWithHttpInfo($payment_id)
    {
        $returnType = '';
        $request = $this->captureAPaymentRequest($payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureAPayment'
     *
     * @param  string $payment_id The &#x60;payment_id&#x60; of the payment you’re capturing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureAPaymentRequest($payment_id)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling captureAPayment'
            );
        }

        $resourcePath = '/v1/payments/{paymentId}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAPayment
     *
     * Create a payment
     *
     * @param  \Swagger\Client\Model\CreateCardPaymentRequest $body requestPayload (required)
     * @param  string $idempotency_key idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreatePaymentResult
     */
    public function createAPayment($body, $idempotency_key = null)
    {
        list($response) = $this->createAPaymentWithHttpInfo($body, $idempotency_key);
        return $response;
    }

    /**
     * Operation createAPaymentWithHttpInfo
     *
     * Create a payment
     *
     * @param  \Swagger\Client\Model\CreateCardPaymentRequest $body requestPayload (required)
     * @param  string $idempotency_key (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreatePaymentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAPaymentWithHttpInfo($body, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\CreatePaymentResult';
        $request = $this->createAPaymentRequest($body, $idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreatePaymentResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAPaymentAsync
     *
     * Create a payment
     *
     * @param  \Swagger\Client\Model\CreateCardPaymentRequest $body requestPayload (required)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPaymentAsync($body, $idempotency_key = null)
    {
        return $this->createAPaymentAsyncWithHttpInfo($body, $idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAPaymentAsyncWithHttpInfo
     *
     * Create a payment
     *
     * @param  \Swagger\Client\Model\CreateCardPaymentRequest $body requestPayload (required)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPaymentAsyncWithHttpInfo($body, $idempotency_key = null)
    {
        $returnType = '\Swagger\Client\Model\CreatePaymentResult';
        $request = $this->createAPaymentRequest($body, $idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAPayment'
     *
     * @param  \Swagger\Client\Model\CreateCardPaymentRequest $body requestPayload (required)
     * @param  string $idempotency_key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAPaymentRequest($body, $idempotency_key = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAPayment'
            );
        }

        $resourcePath = '/v1/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAPayment
     *
     * Get information about a single payment
     *
     * @param  string $payment_id Returns the payment with the matching &#x60;payment_id&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaymentWithAllLinks
     */
    public function getAPayment($payment_id)
    {
        list($response) = $this->getAPaymentWithHttpInfo($payment_id);
        return $response;
    }

    /**
     * Operation getAPaymentWithHttpInfo
     *
     * Get information about a single payment
     *
     * @param  string $payment_id Returns the payment with the matching &#x60;payment_id&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaymentWithAllLinks, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAPaymentWithHttpInfo($payment_id)
    {
        $returnType = '\Swagger\Client\Model\PaymentWithAllLinks';
        $request = $this->getAPaymentRequest($payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentWithAllLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAPaymentAsync
     *
     * Get information about a single payment
     *
     * @param  string $payment_id Returns the payment with the matching &#x60;payment_id&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPaymentAsync($payment_id)
    {
        return $this->getAPaymentAsyncWithHttpInfo($payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAPaymentAsyncWithHttpInfo
     *
     * Get information about a single payment
     *
     * @param  string $payment_id Returns the payment with the matching &#x60;payment_id&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPaymentAsyncWithHttpInfo($payment_id)
    {
        $returnType = '\Swagger\Client\Model\PaymentWithAllLinks';
        $request = $this->getAPaymentRequest($payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAPayment'
     *
     * @param  string $payment_id Returns the payment with the matching &#x60;payment_id&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAPaymentRequest($payment_id)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getAPayment'
            );
        }

        $resourcePath = '/v1/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsForAPayment
     *
     * Get a payment's events
     *
     * @param  string $payment_id Payment identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaymentEvents
     */
    public function getEventsForAPayment($payment_id)
    {
        list($response) = $this->getEventsForAPaymentWithHttpInfo($payment_id);
        return $response;
    }

    /**
     * Operation getEventsForAPaymentWithHttpInfo
     *
     * Get a payment's events
     *
     * @param  string $payment_id Payment identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaymentEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForAPaymentWithHttpInfo($payment_id)
    {
        $returnType = '\Swagger\Client\Model\PaymentEvents';
        $request = $this->getEventsForAPaymentRequest($payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsForAPaymentAsync
     *
     * Get a payment's events
     *
     * @param  string $payment_id Payment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsForAPaymentAsync($payment_id)
    {
        return $this->getEventsForAPaymentAsyncWithHttpInfo($payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsForAPaymentAsyncWithHttpInfo
     *
     * Get a payment's events
     *
     * @param  string $payment_id Payment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsForAPaymentAsyncWithHttpInfo($payment_id)
    {
        $returnType = '\Swagger\Client\Model\PaymentEvents';
        $request = $this->getEventsForAPaymentRequest($payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsForAPayment'
     *
     * @param  string $payment_id Payment identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsForAPaymentRequest($payment_id)
    {
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getEventsForAPayment'
            );
        }

        $resourcePath = '/v1/payments/{paymentId}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPayments
     *
     * Search payments
     *
     * @param  string $reference Returns payments with &#x60;reference&#x60; values exactly matching your specified value. (optional)
     * @param  string $email Returns payments with matching &#x60;email&#x60; values. You can send full or partial email addresses. &#x60;email&#x60; is the paying user’s email address. (optional)
     * @param  string $state Returns payments in a matching &#x60;state&#x60;. &#x60;state&#x60; reflects where a payment is in the [payment status lifecycle](https://docs.payments.service.gov.uk/api_reference/#payment-status-lifecycle). (optional)
     * @param  string $card_brand Returns payments paid with a particular card brand. (optional)
     * @param  string $from_date Returns payments created on or after the &#x60;from_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $to_date Returns payments created before the &#x60;to_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $page Returns a [specific page of results](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;1&#x60;. (optional)
     * @param  string $display_size The number of payments returned [per results page](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;500&#x60;. Maximum value is &#x60;500&#x60;. (optional)
     * @param  string $cardholder_name Returns payments paid with cards under this cardholder name. (optional)
     * @param  string $first_digits_card_number Returns payments paid by cards beginning with the &#x60;first_digits_card_number&#x60; value. &#x60;first_digits_card_number&#x60; value must be 6 digits. (optional)
     * @param  string $last_digits_card_number Returns payments paid by cards ending with the &#x60;last_digits_card_number&#x60; value. &#x60;last_digits_card_number&#x60; value must be 4 digits. (optional)
     * @param  string $from_settled_date Returns payments settled on or after the &#x60;from_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $to_settled_date Returns payments settled before the &#x60;to_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $agreement_id Returns payments that were authorised using the agreement with this &#x60;agreement_id&#x60;. Must be an exact match. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaymentSearchResults
     */
    public function searchPayments($reference = null, $email = null, $state = null, $card_brand = null, $from_date = null, $to_date = null, $page = null, $display_size = null, $cardholder_name = null, $first_digits_card_number = null, $last_digits_card_number = null, $from_settled_date = null, $to_settled_date = null, $agreement_id = null)
    {
        list($response) = $this->searchPaymentsWithHttpInfo($reference, $email, $state, $card_brand, $from_date, $to_date, $page, $display_size, $cardholder_name, $first_digits_card_number, $last_digits_card_number, $from_settled_date, $to_settled_date, $agreement_id);
        return $response;
    }

    /**
     * Operation searchPaymentsWithHttpInfo
     *
     * Search payments
     *
     * @param  string $reference Returns payments with &#x60;reference&#x60; values exactly matching your specified value. (optional)
     * @param  string $email Returns payments with matching &#x60;email&#x60; values. You can send full or partial email addresses. &#x60;email&#x60; is the paying user’s email address. (optional)
     * @param  string $state Returns payments in a matching &#x60;state&#x60;. &#x60;state&#x60; reflects where a payment is in the [payment status lifecycle](https://docs.payments.service.gov.uk/api_reference/#payment-status-lifecycle). (optional)
     * @param  string $card_brand Returns payments paid with a particular card brand. (optional)
     * @param  string $from_date Returns payments created on or after the &#x60;from_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $to_date Returns payments created before the &#x60;to_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $page Returns a [specific page of results](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;1&#x60;. (optional)
     * @param  string $display_size The number of payments returned [per results page](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;500&#x60;. Maximum value is &#x60;500&#x60;. (optional)
     * @param  string $cardholder_name Returns payments paid with cards under this cardholder name. (optional)
     * @param  string $first_digits_card_number Returns payments paid by cards beginning with the &#x60;first_digits_card_number&#x60; value. &#x60;first_digits_card_number&#x60; value must be 6 digits. (optional)
     * @param  string $last_digits_card_number Returns payments paid by cards ending with the &#x60;last_digits_card_number&#x60; value. &#x60;last_digits_card_number&#x60; value must be 4 digits. (optional)
     * @param  string $from_settled_date Returns payments settled on or after the &#x60;from_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $to_settled_date Returns payments settled before the &#x60;to_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $agreement_id Returns payments that were authorised using the agreement with this &#x60;agreement_id&#x60;. Must be an exact match. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaymentSearchResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPaymentsWithHttpInfo($reference = null, $email = null, $state = null, $card_brand = null, $from_date = null, $to_date = null, $page = null, $display_size = null, $cardholder_name = null, $first_digits_card_number = null, $last_digits_card_number = null, $from_settled_date = null, $to_settled_date = null, $agreement_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaymentSearchResults';
        $request = $this->searchPaymentsRequest($reference, $email, $state, $card_brand, $from_date, $to_date, $page, $display_size, $cardholder_name, $first_digits_card_number, $last_digits_card_number, $from_settled_date, $to_settled_date, $agreement_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaymentSearchResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPaymentsAsync
     *
     * Search payments
     *
     * @param  string $reference Returns payments with &#x60;reference&#x60; values exactly matching your specified value. (optional)
     * @param  string $email Returns payments with matching &#x60;email&#x60; values. You can send full or partial email addresses. &#x60;email&#x60; is the paying user’s email address. (optional)
     * @param  string $state Returns payments in a matching &#x60;state&#x60;. &#x60;state&#x60; reflects where a payment is in the [payment status lifecycle](https://docs.payments.service.gov.uk/api_reference/#payment-status-lifecycle). (optional)
     * @param  string $card_brand Returns payments paid with a particular card brand. (optional)
     * @param  string $from_date Returns payments created on or after the &#x60;from_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $to_date Returns payments created before the &#x60;to_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $page Returns a [specific page of results](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;1&#x60;. (optional)
     * @param  string $display_size The number of payments returned [per results page](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;500&#x60;. Maximum value is &#x60;500&#x60;. (optional)
     * @param  string $cardholder_name Returns payments paid with cards under this cardholder name. (optional)
     * @param  string $first_digits_card_number Returns payments paid by cards beginning with the &#x60;first_digits_card_number&#x60; value. &#x60;first_digits_card_number&#x60; value must be 6 digits. (optional)
     * @param  string $last_digits_card_number Returns payments paid by cards ending with the &#x60;last_digits_card_number&#x60; value. &#x60;last_digits_card_number&#x60; value must be 4 digits. (optional)
     * @param  string $from_settled_date Returns payments settled on or after the &#x60;from_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $to_settled_date Returns payments settled before the &#x60;to_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $agreement_id Returns payments that were authorised using the agreement with this &#x60;agreement_id&#x60;. Must be an exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentsAsync($reference = null, $email = null, $state = null, $card_brand = null, $from_date = null, $to_date = null, $page = null, $display_size = null, $cardholder_name = null, $first_digits_card_number = null, $last_digits_card_number = null, $from_settled_date = null, $to_settled_date = null, $agreement_id = null)
    {
        return $this->searchPaymentsAsyncWithHttpInfo($reference, $email, $state, $card_brand, $from_date, $to_date, $page, $display_size, $cardholder_name, $first_digits_card_number, $last_digits_card_number, $from_settled_date, $to_settled_date, $agreement_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPaymentsAsyncWithHttpInfo
     *
     * Search payments
     *
     * @param  string $reference Returns payments with &#x60;reference&#x60; values exactly matching your specified value. (optional)
     * @param  string $email Returns payments with matching &#x60;email&#x60; values. You can send full or partial email addresses. &#x60;email&#x60; is the paying user’s email address. (optional)
     * @param  string $state Returns payments in a matching &#x60;state&#x60;. &#x60;state&#x60; reflects where a payment is in the [payment status lifecycle](https://docs.payments.service.gov.uk/api_reference/#payment-status-lifecycle). (optional)
     * @param  string $card_brand Returns payments paid with a particular card brand. (optional)
     * @param  string $from_date Returns payments created on or after the &#x60;from_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $to_date Returns payments created before the &#x60;to_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $page Returns a [specific page of results](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;1&#x60;. (optional)
     * @param  string $display_size The number of payments returned [per results page](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;500&#x60;. Maximum value is &#x60;500&#x60;. (optional)
     * @param  string $cardholder_name Returns payments paid with cards under this cardholder name. (optional)
     * @param  string $first_digits_card_number Returns payments paid by cards beginning with the &#x60;first_digits_card_number&#x60; value. &#x60;first_digits_card_number&#x60; value must be 6 digits. (optional)
     * @param  string $last_digits_card_number Returns payments paid by cards ending with the &#x60;last_digits_card_number&#x60; value. &#x60;last_digits_card_number&#x60; value must be 4 digits. (optional)
     * @param  string $from_settled_date Returns payments settled on or after the &#x60;from_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $to_settled_date Returns payments settled before the &#x60;to_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $agreement_id Returns payments that were authorised using the agreement with this &#x60;agreement_id&#x60;. Must be an exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentsAsyncWithHttpInfo($reference = null, $email = null, $state = null, $card_brand = null, $from_date = null, $to_date = null, $page = null, $display_size = null, $cardholder_name = null, $first_digits_card_number = null, $last_digits_card_number = null, $from_settled_date = null, $to_settled_date = null, $agreement_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaymentSearchResults';
        $request = $this->searchPaymentsRequest($reference, $email, $state, $card_brand, $from_date, $to_date, $page, $display_size, $cardholder_name, $first_digits_card_number, $last_digits_card_number, $from_settled_date, $to_settled_date, $agreement_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPayments'
     *
     * @param  string $reference Returns payments with &#x60;reference&#x60; values exactly matching your specified value. (optional)
     * @param  string $email Returns payments with matching &#x60;email&#x60; values. You can send full or partial email addresses. &#x60;email&#x60; is the paying user’s email address. (optional)
     * @param  string $state Returns payments in a matching &#x60;state&#x60;. &#x60;state&#x60; reflects where a payment is in the [payment status lifecycle](https://docs.payments.service.gov.uk/api_reference/#payment-status-lifecycle). (optional)
     * @param  string $card_brand Returns payments paid with a particular card brand. (optional)
     * @param  string $from_date Returns payments created on or after the &#x60;from_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $to_date Returns payments created before the &#x60;to_date&#x60;. Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;. (optional)
     * @param  string $page Returns a [specific page of results](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;1&#x60;. (optional)
     * @param  string $display_size The number of payments returned [per results page](https://docs.payments.service.gov.uk/api_reference/#pagination). Defaults to &#x60;500&#x60;. Maximum value is &#x60;500&#x60;. (optional)
     * @param  string $cardholder_name Returns payments paid with cards under this cardholder name. (optional)
     * @param  string $first_digits_card_number Returns payments paid by cards beginning with the &#x60;first_digits_card_number&#x60; value. &#x60;first_digits_card_number&#x60; value must be 6 digits. (optional)
     * @param  string $last_digits_card_number Returns payments paid by cards ending with the &#x60;last_digits_card_number&#x60; value. &#x60;last_digits_card_number&#x60; value must be 4 digits. (optional)
     * @param  string $from_settled_date Returns payments settled on or after the &#x60;from_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $to_settled_date Returns payments settled before the &#x60;to_settled_date&#x60; value. You can only search by settled date if your payment service provider is Stripe. Date must be in ISO 8601 format to date-level accuracy - &#x60;YYYY-MM-DD&#x60;. Payments are settled when your payment service provider sends funds to your bank account. (optional)
     * @param  string $agreement_id Returns payments that were authorised using the agreement with this &#x60;agreement_id&#x60;. Must be an exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPaymentsRequest($reference = null, $email = null, $state = null, $card_brand = null, $from_date = null, $to_date = null, $page = null, $display_size = null, $cardholder_name = null, $first_digits_card_number = null, $last_digits_card_number = null, $from_settled_date = null, $to_settled_date = null, $agreement_id = null)
    {

        $resourcePath = '/v1/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($reference !== null) {
            $queryParams['reference'] = ObjectSerializer::toQueryValue($reference, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($card_brand !== null) {
            $queryParams['card_brand'] = ObjectSerializer::toQueryValue($card_brand, null);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($display_size !== null) {
            $queryParams['display_size'] = ObjectSerializer::toQueryValue($display_size, null);
        }
        // query params
        if ($cardholder_name !== null) {
            $queryParams['cardholder_name'] = ObjectSerializer::toQueryValue($cardholder_name, null);
        }
        // query params
        if ($first_digits_card_number !== null) {
            $queryParams['first_digits_card_number'] = ObjectSerializer::toQueryValue($first_digits_card_number, null);
        }
        // query params
        if ($last_digits_card_number !== null) {
            $queryParams['last_digits_card_number'] = ObjectSerializer::toQueryValue($last_digits_card_number, null);
        }
        // query params
        if ($from_settled_date !== null) {
            $queryParams['from_settled_date'] = ObjectSerializer::toQueryValue($from_settled_date, null);
        }
        // query params
        if ($to_settled_date !== null) {
            $queryParams['to_settled_date'] = ObjectSerializer::toQueryValue($to_settled_date, null);
        }
        // query params
        if ($agreement_id !== null) {
            $queryParams['agreement_id'] = ObjectSerializer::toQueryValue($agreement_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
